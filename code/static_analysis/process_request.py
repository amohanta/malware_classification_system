import hashlib

from flask import Flask, request, jsonify

app = Flask(__name__)


class InvalidUsage(Exception):
    # Default status code
    status_code = 400

    def __init__(self, message, status_code=None, payload=None):
        Exception.__init__(self)
        self.message = message
        if status_code is not None:
            self.status_code = status_code
        self.payload = payload

    def to_dict(self):
        rv = dict(self.payload or ())
        rv['message'] = self.message
        return rv


@app.errorhandler(InvalidUsage)
def handle_invalid_usage(error):
    response = jsonify(error.to_dict())
    response.status_code = error.status_code
    return response

file_hash_set = set()

def analysed(file_data):
    """
        Check if the submitted file has
        already been analyzed, currently
        only checks in memory
    """
    already_analysed = False
    file_hash = hashlib.sha256(file_data).hexdigest()
    if file_hash not in file_hash_set:
        file_hash_set.add(file_hash)
    else:
        already_analysed = True
    return already_analysed


def check_is_exe(file_data):
    """
        Check if the file submitted is
        actually a PE executable file

        Arguments:
            file_handle (open file handle)
        Returns:
            is_exe (boolean) indicating if the file is an
            executable or not
    """
    # Indicates if the file is an executable
    is_exe = False
    # Signature we are expecting
    mz_signature = 'MZ'
    # Get the first two bytes in the file
    file_header = file_data[0:2]
    if file_header == mz_signature:
        is_exe = True
    return is_exe


@app.route('/api/analyse', methods=['POST'])
def get_file():
    """
        Gets an executable file over HTTP
        via a POST request and passes it further
        down the analysis chain
    """
    file_handle = request.files.get('sample')
    file_data = bytearray(file_handle.read())
    file_handle.close()
    if not check_is_exe(file_data):
        raise InvalidUsage('File is not an executable', 600)
        file_handle.close()
    else:
        if analysed(file_data):
            raise InvalidUsage('File has already been analysed', 601)
            file_handle.close()
        else:
            print 'Processing file'


    return jsonify("Processing file")


if __name__ == '__main__':
    app.run(debug=True)
