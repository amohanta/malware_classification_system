import argparse
import asyncore
import base64
import email
import hashlib
import os
import smtpd

class CatchSMTPMessage(smtpd.SMTPServer):

    email_parser = email.Parser.Parser()
    spam_path = None
    message = None
    payload = None
    filetypes_to_capture = ["application/octet-stream"]

    def set_path(self, directory):
        '''
            Sets the directory in which to write
            attachments to
        '''
        self.spam_path = directory


    def process_message(self, peer, mailfrom, rcpttos, data):
        '''
            Extracts the email header and body
        '''
        self.message = self.email_parser.parsestr(data)
        self.get_attachment()


    def check_duplicate_attachment(self, data):
        '''
            Hashes the bytes of the attachment payload
            and checks if it has already been saved
        '''
        exists = None
        filename = hashlib.sha256(data).hexdigest()
        if os.path.isfile(self.spam_path + filename):
            exists = True
        else:
            exists = False
        return exists


    def write_attachment(self, filename, data):
        '''
            Writes attachments to a specificed directory
        '''
        if self.check_duplicate_attachment(data):
            return
        else:
            filename = self.spam_path + hashlib.sha256(data).hexdigest()
            with open(filename, 'w') as file_handle:
                for line in data:
                    file_handle.write(line)


    def get_attachment(self):
        '''
            Parses out attachments from email bodies
            and decodes them
        '''
        for message in self.message.walk():
            for filetype in self.filetypes_to_capture:
                if filetype in message.get_content_type():
                    filename = message.get_filename()
                    data = message.get_payload()
                    if message.get('Content-Transfer-Encoding') == 'BASE64':
                        data = base64.b64decode(data)
                    self.write_attachment(filename, data)


def main():
    argument_parser = argparse.ArgumentParser()
    argument_parser.add_argument(
            '-i',
            '--ip',
            required=True,
            help='IP address to bind to')

    argument_parser.add_argument(
            '-p',
            '--port',
            type=int,
            required=True,
            help='Port to listen on')

    argument_parser.add_argument(
            '-d',
            '--directory',
            required=True,
            help='Directory to dump attachments into')

    arguments = argument_parser.parse_args()
    ip_port = (arguments.ip, arguments.port)
    smtp_server = CatchSMTPMessage(ip_port, None)
    smtp_server.set_path(arguments.directory)
    asyncore.loop()

if __name__ == '__main__':
    main()
