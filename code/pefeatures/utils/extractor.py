import pefile
import logging
import os

class Singleton(type):
    _instances = {}
    def __call__(cls, *args, **kwargs):
        if cls not in cls._instances:
            cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)
        return cls._instances[cls]


class Extractor(object):
    __metaclass__ = Singleton

    def __init__(self):
        logging.debug('Extractor init')


    @staticmethod
    def setup_logging(debug):
        '''
            Bootstraps the logging config and
            sets the correct logging level
            Arguments:
                debug (boolean) indicating if the verbosity
                of the script should be increased
        '''
        logger = logging.getLogger()
        handler = logging.StreamHandler()
        formatter = logging.Formatter(
             '%(asctime)s:%(levelname)s:%(message)s')
        handler.setFormatter(formatter)
        logger.addHandler(handler)

        if debug is True:
            logger.setLevel(logging.DEBUG)
        else:
            logger.setLevel(logging.INFO)

    def __load_file(self, file_name):

        self.path = file_name
        self.file_name = os.path.basename(file_name)
        self.pe_file = None
        logging.getLogger()
        try:
            self.pe_file = pefile.PE(file_name)
        except pefile.PEFormatError as pe_header_missing:
            logging.debug(pe_header_missing.message)
            exit(-1)


    def __get_dos_header_features(self):
        pass


    def __get_file_header_features(self):
        logging.info('Extracting features from FileHeader')
        pe_file_header_features = {}
        pe_file_header_features['NumberSections'] = self.pe_file.FILE_HEADER.NumberOfSections
        pe_file_header_features['SizeOptHeader'] = self.pe_file.FILE_HEADER.SizeOfOptionalHeader
        return pe_file_header_features


    def __get_optional_header_features(self):
        logging.info('Extracting features from OptionalHeader')
        pe_opt_header_features = {}
        pe_opt_header_features['EntryPoint'] = self.pe_file.OPTIONAL_HEADER.AddressOfEntryPoint
        pe_opt_header_features['ImageBase'] = self.pe_file.OPTIONAL_HEADER.ImageBase
        pe_opt_header_features['HeapCommitSize'] = self.pe_file.OPTIONAL_HEADER.SizeOfHeapCommit
        return pe_opt_header_features


    def get_features(self, file_name):
        self. __load_file(file_name)
        if self.pe_file:
            logging.info(self.file_name)
            file_features = {}
            file_features[self.file_name] = {}
            file_features[self.file_name]['FileHeaderFeatures'] = self.__get_file_header_features()
            file_features[self.file_name]['OptionalHeaderFeatures'] = self.__get_optional_header_features()
            logging.info(file_features[self.file_name]['FileHeaderFeatures'])
            logging.info(file_features[self.file_name]['OptionalHeaderFeatures'])
            logging.debug(file_features.items())
