import argparse
import array
import logging
import os

import numpy
from scipy import misc

def setup_logging(debug):
    '''
        Bootstraps the logging config and
        sets the correct logging level
        Arguments:
            debug (boolean) indicating if the verbosity
            of the script should be increased
    '''
    logger = logging.getLogger()
    handler = logging.StreamHandler()
    formatter = logging.Formatter(
        '%(asctime)s:%(levelname)s:%(message)s')
    handler.setFormatter(formatter)
    logger.addHandler(handler)

    if debug is True:
        logger.setLevel(logging.DEBUG)
    else:
        logger.setLevel(logging.INFO)


def check_path(path):
    if os.path.isdir(path):
        return path
    else:
        raise argparse.ArgumentTypeError('Not a valid path')


def generate_image(path):
    file_data = None
    file_data_size = os.path.getsize(path)
    file_handle = open(path, 'rb')
    image_width = 256
    image_height = file_data_size % image_width
    image_data = array.array('B')
    image_data.fromfile(file_handle, file_data_size - image_height)
    file_handle.close()
    image_data_formatted = numpy.reshape(image_data, (len(image_data)/image_width, image_width))
    image_data_formatted = numpy.uint8(image_data_formatted)
    file_name = os.path.basename(path.replace('.virus', '.png'))
    img_path = os.path.dirname(path) + '/img/' + file_name
    misc.imsave(img_path, image_data_formatted)



def main():
    argument_parser = argparse.ArgumentParser()

    argument_parser.add_argument(
        '-p',
        '--path',
        required=True,
        help='Path to folder containing binaries')

    argument_parser.add_argument(
        '-d',
        '--debug',
        action='store_true',
        help='Enable verbose messages')

    arguments = argument_parser.parse_args()

    path = check_path(arguments.path)

    for file_name in os.listdir(path):
        abs_file_name = path + file_name
        if os.path.isfile(abs_file_name):
            generate_image(abs_file_name)


if __name__ == '__main__':
    main()
