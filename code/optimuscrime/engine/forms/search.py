from django import forms
from django.core.validators import RegexValidator
from django.db.models import Q

from engine.models import Sample


class SampleSearch(forms.Form):
    family_values = [
        ('0', 'Any'),
        ('1', 'Locky'),
        ('2', 'Zeus')
    ]
    behaviour_values = [
        ('0', 'Any'),
        ('1', 'Ransomware'),
        ('2', 'Banker')
    ]
    hash = forms.CharField(label='Enter MD5 or SHA-1 digest', min_length=32, max_length=40)
    family = forms.ChoiceField(label='Select Family', choices=family_values)
    behaviour = forms.ChoiceField(label='Select Behaviour', choices=behaviour_values)

    # called each time form.is_valid() is called
    def clean(self):
        cleaned_data = super(SampleSearch, self).clean()

    def clean_hash(self):
        # data from form post, dict
        hash = self.cleaned_data.get('hash')
        # 40 character needs to be first, makes sure hash is md5 or sha1
        hash_validator = RegexValidator("([a-fA-F\d]{40})|([a-fA-F\d]{32})")
        try:
            hash_validator(hash)
        except:
            raise forms.ValidationError('{} is not a valid MD5 or SHA-1 hash'.format(hash))
        # Q is needed to do OR query for some reason
        sample = Sample.objects.get(Q(md5=hash) | Q(sha1=hash))
        print sample.file_name
        return hash
